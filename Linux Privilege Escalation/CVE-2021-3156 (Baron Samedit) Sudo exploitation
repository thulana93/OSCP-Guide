🧨 CVE-2021-3156 (Baron Samedit) - https://github.com/blasty/CVE-2021-3156
📌 Summary
CVE-2021-3156 is a heap-based buffer overflow vulnerability in sudoedit, present in multiple sudo versions. It allows a local unprivileged user to escalate privileges to root by:
    Misusing argument parsing (sudoedit -s '\' A...)
    Causing an off-by-one heap overflow
    Overwriting function pointers or heap metadata
    Redirecting code execution into attacker-controlled memory

⚙️ Building the Exploit with make
After cloning the public PoC repo:

    git clone https://github.com/blasty/CVE-2021-3156.git
    cd CVE-2021-3156
    make

This does the following:
      Deletes any old build folders: rm -rf libnss_X
      Creates a new payload folder: mkdir libnss_X
      Compiles the exploit:
          hax.c → sudo-hax-me-a-sandwich
      Builds a malicious NSS module:
          lib.c → libnss_X/P0P_SH3LLZ_ .so.2

📦 Memory Allocation & Overflow (Heap View)
✅ Before Overflow
  sudoeit builds a heap buffer for arguments:

    char *user_args = malloc(total_len);

Example (simplified):

Command: sudoedit -s '\' AAAAAA...

Buffer Allocated For:
+-----------------------+
| '\' (1 byte)          |
| 'A'*10000 (10,000 B)  |
| NULL (1 byte)         |
+-----------------------+
  Total = 10002 bytes
BUT — \ is escaped to \\ when copied → uses 2 bytes.

❌ Overflow Happens
Actual Copy:
    2 bytes (\\) + 10,000 A's = 10,002 bytes
    This causes 1-byte overflow beyond allocated memory:

+-----------------------+
| user_args (10002 B)   |
+-----------------------+
| OVERWRITE: 1 byte     |  ← May hit pointer or metadata
+-----------------------+

🧨 Pointer Corruption
Let’s say right after the buffer:

+-----------------------+
| func_ptr = 0x08048400 |  ← Legit function address
+-----------------------+
If attacker controls the overflow:

  func_ptr → 0x7fffffffe120  ← Points to shellcode in envp[]

📍 Payload Injection
Attacker sets:

    envp[0] = "\x90\x90\x90...<shellcode>";

That goes to the stack at:

  0x7fffffffe120 → \x90\x90\x90.../bin/sh

So when sudo calls the overwritten function pointer:

  func_ptr();

It jumps into the payload → 💥 root shell!

✅ Key Takeaways
Component	                          Purpose
\ in argv	                          Triggers underallocation
A * 10000	                          Overflows heap buffer
envp[0]	                            Stores NOP sled + shellcode
Pointer Overwrite	                  Redirects execution to attacker memory
make	                              Automates exploit + payload build process
